"""
Approach is use two hash maps 
One for string and another one for pattern
since there are only 256 valid characters in english the size of both hashmaps can be 256

Fill the values for pattern hashmap with unicode value as key/index and count of occurence as value

Start filling string hash and search for the character in pattern hashmap 
if count of characters in string map is less than or equal to characters 
in pattern array increase count 

now if length of count = length of (pattern) then we have 
got all the characters in string that are in pattern.

Now we have to minimize the window size
now there could be a possibility that first few characters of string are
not part of pattern than we can keep incrementing start to the 
first occurence of character that matches pattern.

Another possibility could be that the occuerence of character from the 
start is more than what is required in the string since we have 
encountered it more number of times while filling the string array till
length(pattern) == cnt.

So in either of the two cases our approach is to move starting index ahead 
to narrow the window while keeping the last index where it was. 

Thus this is our least window where all characters can be found so far.
There could be another window ahead.
So our approach will be we will continue till the end of the string and 
as per our logic for every character we add to string hashmap our count
will always be equal to length(pattern) since we won't be incrementing the
count. so for every added cjarater we will again check if we can move our
start index further or not using the same logic.


refernce : Geeks for Geeks(approach 2): https://www.geeksforgeeks.org/find-the-smallest-window-in-a-string-containing-all-characters-of-another-string/
The code for the above approach is below:

"""

def findSubString(string, pat):
    
    length_of_pat = len(pat)
    length_of_string = len(string)
    
    hash_pat = [0]*256
    hash_str = [0]*256
    
    for i in  range(0,length_of_pat):
        hash_pat[ord(pat[i])] +=1
        
    start, start_index, cnt, min_len = 0,-1,0, float('inf')
    
    for j in range(0,length_of_string):
        hash_str[ord(string[j])] +=1
        
        if hash_str[ord(string[j])] <= hash_pat[ord(string[j])]:
            cnt+=1
            
        if cnt == length_of_pat:
            while((hash_str[ord(string[start])] > hash_pat[ord(string[start])])
                                                           or hash_pat[ord(string[start])] == 0):
                if hash_str[ord(string[start])] > hash_pat[ord(string[start])]:
                    hash_str[ord(string[start])] -=1
                    start +=1
            
            if min_len > j-start+1:
                min_len = j-start+1
                start_index = start
        
    
    if start_index == -1:
        print("No such window")
        return " "
    
    return string[start_index: start_index+min_len]



if __name__ == "__main__":
 
    string = "this is a test string"
    pat = "tist"
 
    print("Smallest window is : ")
    print(findSubString(string, pat))
